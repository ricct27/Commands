## List Docker CLI commands
docker
docker container --help

## Display Docker version and info
docker --version
docker version
docker info

## Execute Docker image
docker run hello-world

## List Docker images
docker image ls

## List Docker containers (running, all, all in quiet mode)
docker container ls
docker container ls --all
docker container ls -aq

docker run alpine
    echo "hello from alpine"  # command to run in the container

docker run -it                # interactive way
    alpine /bin/sh

docker build -t friendlyhello .  # Create image using this directory's Dockerfile
docker run -p 4000:80 friendlyhello  # Run "friendlyname" mapping port 4000 to 80
docker run -d -p 4000:80 friendlyhello         # Same thing, but in detached mode
docker container ls                                # List all running containers
docker container ls -a             # List all containers, even those not running
docker container stop <hash>           # Gracefully stop the specified container
docker container kill <hash>         # Force shutdown of the specified container
docker container rm <hash>        # Remove specified container from this machine
docker container rm $(docker container ls -a -q)         # Remove all containers
docker image ls -a                             # List all images on this machine
docker image rm <image id>            # Remove specified image from this machine
docker image rm $(docker image ls -a -q)   # Remove all images from this machine
docker login             # Log in this CLI session using your Docker credentials
docker tag <image> username/repository:tag  # Tag <image> for upload to registry
docker push username/repository:tag            # Upload tagged image to registry
docker run username/repository:tag                   # Run image from a registry

# Services: A distributed app is composed by different pieces called "services".
# Services are just containers. A service only runs "one image" but it codifies
# the way that image runs: what ports it should use, how many replicas of the container
# should run

# A docker-compose.yml file is a YAML file that defines how Docker containers should behave in production.

# A single container running in a service is called a task.

ocker stack ls                                # List stacks or apps
#docker stack deploy -c docker-compose.yml getstartedlab
docker stack deploy -c <composefile .yml> < assign an appname>  # Run the specified Compose file
docker service ls                 # List running services associated with an app
docker service ps <service>                  # List tasks associated with an app
docker inspect <task or container>                   # Inspect task or container
docker container ls -q                                      # List container IDs
docker stack rm <appname>                             # Tear down an application
docker swarm leave --force      # Take down a single node swarm from the manager


# A swarm is a group of machines that are running Docker and joined into a cluster.

# Running Docker Swarm Visualizer ,  On brouser http://localhost:8080/
docker service create \
  --name=viz \
  --publish=8080:8080/tcp \
  --constraint=node.role==manager \
  --mount=type=bind,src=/var/run/docker.sock,dst=/var/run/docker.sock \
  dockersamples/visualizer



docker node ls         # List the nodes in your swarm
docker node inspect <node ID>        # Inspect a node
docker swarm join-token -q worker   # View join token
docker node ls                # View nodes in swarm (while logged on to manager)
docker swarm leave  # Make the worker leave the swarm
docker swarm leave -f # Make master leave, kill swarm

# A stack is a group of interrelated services that share dependencies,
#and can be orchestrated and scaled together.
